{"version":3,"file":"resolution.js","sources":["../../src/plugins/resolution/constants.js","../../src/plugins/resolution/utils.js","../../src/plugins/resolution/index.js"],"sourcesContent":["/**\n * @summary Available events\n * @enum {string}\n * @memberof PSV.plugins.ResolutionPlugin\n * @constant\n */\nexport const EVENTS = {\n  /**\n   * @event resolution-changed\n   * @memberof PSV.plugins.ResolutionPlugin\n   * @summary Triggered when the resolution is changed\n   * @param {string} resolutionId\n   */\n  RESOLUTION_CHANGED: 'resolution-changed',\n};\n","/**\n * @summary Returns deep equality between objects\n * {@link https://gist.github.com/egardner/efd34f270cc33db67c0246e837689cb9}\n * @param obj1\n * @param obj2\n * @return {boolean}\n * @private\n */\nexport function deepEqual(obj1, obj2) {\n  if (obj1 === obj2) {\n    return true;\n  }\n  else if (isObject(obj1) && isObject(obj2)) {\n    if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n      return false;\n    }\n    for (const prop of Object.keys(obj1)) {\n      if (!deepEqual(obj1[prop], obj2[prop])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  else {\n    return false;\n  }\n}\n\nfunction isObject(obj) {\n  return typeof obj === 'object' && obj != null;\n}\n","import { AbstractPlugin, CONSTANTS, DEFAULTS, PSVError } from '../..';\nimport { EVENTS } from './constants';\nimport { deepEqual } from './utils';\n\n\n/**\n * @typedef {Object} PSV.plugins.ResolutionPlugin.Resolution\n * @property {string} id\n * @property {string} label\n * @property {*} panorama\n */\n\n/**\n * @typedef {Object} PSV.plugins.ResolutionPlugin.Options\n * @property {PSV.plugins.ResolutionPlugin.Resolution[]} resolutions - list of available resolutions\n */\n\n\nDEFAULTS.lang.resolution = 'Quality';\n\n\nexport { EVENTS } from './constants';\n\n\n/**\n * @summary Adds a setting to choose between multiple resolutions of the panorama.\n * @extends PSV.plugins.AbstractPlugin\n * @memberof PSV.plugins\n */\nexport class ResolutionPlugin extends AbstractPlugin {\n\n  static id = 'resolution';\n\n  /**\n   * @deprecated use the EVENTS constants of the module\n   */\n  static EVENTS = EVENTS;\n\n  /**\n   * @param {PSV.Viewer} psv\n   * @param {PSV.plugins.ResolutionPlugin.Options} options\n   */\n  constructor(psv, options) {\n    super(psv);\n\n    /**\n     * @type {PSV.plugins.SettingsPlugin}\n     * @readonly\n     * @private\n     */\n    this.settings = psv.getPlugin('settings');\n\n    if (!this.settings) {\n      throw new PSVError('Resolution plugin requires the Settings plugin');\n    }\n\n    this.settings.addSetting({\n      id     : ResolutionPlugin.id,\n      type   : 'options',\n      label  : this.psv.config.lang.resolution,\n      current: () => this.prop.resolution,\n      options: () => this.__getSettingsOptions(),\n      apply  : resolution => this.setResolution(resolution),\n    });\n\n    /**\n     * @summary Available resolutions\n     * @member {PSV.plugins.ResolutionPlugin.Resolution[]}\n     */\n    this.resolutions = [];\n\n    /**\n     * @summary Available resolutions\n     * @member {Object.<string, PSV.plugins.ResolutionPlugin.Resolution>}\n     * @private\n     */\n    this.resolutionsById = {};\n\n    /**\n     * @type {Object}\n     * @property {string} resolution - Current resolution\n     * @private\n     */\n    this.prop = {\n      resolution: null,\n    };\n\n    this.psv.on(CONSTANTS.EVENTS.PANORAMA_LOADED, this);\n\n    if (options?.resolutions) {\n      this.setResolutions(options.resolutions);\n    }\n  }\n\n  /**\n   * @package\n   */\n  destroy() {\n    this.psv.off(CONSTANTS.EVENTS.PANORAMA_LOADED, this);\n\n    this.settings.removeSetting(ResolutionPlugin.id);\n\n    super.destroy();\n  }\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  handleEvent(e) {\n    if (e.type === CONSTANTS.EVENTS.PANORAMA_LOADED) {\n      this.__refreshResolution();\n    }\n  }\n\n  /**\n   * @summary Changes the available resolutions\n   * @param {PSV.plugins.ResolutionPlugin.Resolution[]} resolutions\n   */\n  setResolutions(resolutions) {\n    this.resolutions = resolutions;\n    this.resolutionsById = {};\n\n    resolutions.forEach((resolution) => {\n      if (!resolution.id) {\n        throw new PSVError('Missing resolution id');\n      }\n      this.resolutionsById[resolution.id] = resolution;\n    });\n\n    this.__refreshResolution();\n  }\n\n  /**\n   * @summary Changes the current resolution\n   * @param {string} id\n   */\n  setResolution(id) {\n    if (!this.resolutionsById[id]) {\n      throw new PSVError(`Resolution ${id} unknown`);\n    }\n\n    return this.psv.setPanorama(this.resolutionsById[id].panorama, { transition: false, showLoader: false });\n  }\n\n  /**\n   * @summary Returns the current resolution\n   * @return {string}\n   */\n  getResolution() {\n    return this.prop.resolution;\n  }\n\n  /**\n   * @summary Updates current resolution on panorama load\n   * @private\n   */\n  __refreshResolution() {\n    const resolution = this.resolutions.find(r => deepEqual(this.psv.config.panorama, r.panorama));\n    if (this.prop.resolution !== resolution?.id) {\n      this.prop.resolution = resolution?.id;\n      this.trigger(EVENTS.RESOLUTION_CHANGED, this.prop.resolution);\n    }\n  }\n\n  /**\n   * @summary Returns options for Settings plugin\n   * @return {PSV.plugins.SettingsPlugin.Option[]}\n   * @private\n   */\n  __getSettingsOptions() {\n    return this.resolutions\n      .map(resolution => ({\n        id   : resolution.id,\n        label: resolution.label,\n      }));\n  }\n\n}\n"],"names":["EVENTS","RESOLUTION_CHANGED","deepEqual","obj1","obj2","isObject","Object","keys","length","prop","obj","DEFAULTS","lang","resolution","ResolutionPlugin","psv","options","settings","getPlugin","PSVError","addSetting","id","type","label","config","current","__getSettingsOptions","apply","setResolution","resolutions","resolutionsById","on","CONSTANTS","PANORAMA_LOADED","setResolutions","destroy","off","removeSetting","handleEvent","e","__refreshResolution","forEach","setPanorama","panorama","transition","showLoader","getResolution","find","r","trigger","map","AbstractPlugin"],"mappings":"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"}