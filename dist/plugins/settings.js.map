{"version":3,"file":"settings.js","sources":["../../src/plugins/settings/constants.js","../../src/plugins/settings/SettingsButton.js","../../src/plugins/settings/index.js"],"sourcesContent":["import check from './check.svg';\nimport chevron from './chevron.svg';\nimport icon from './settings.svg';\nimport switchOff from './switch-off.svg';\nimport switchOn from './switch-on.svg';\n\n/**\n * @summary Available events\n * @enum {string}\n * @memberof PSV.plugins.ResolutionPlugin\n * @constant\n */\nexport const EVENTS = {\n  /**\n   * @event setting-changed\n   * @memberof PSV.plugins.SettingsPlugin\n   * @summary Triggered when a setting is changed\n   * @param {string} settingId\n   * @param {any} value\n   */\n  SETTING_CHANGED: 'setting-changed',\n};\n\n\n/**\n * @summary Panel identifier for settings content\n * @type {string}\n * @constant\n * @private\n */\nexport const ID_PANEL = 'settings';\n\n/**\n * @summary Property name added to settings items\n * @type {string}\n * @constant\n * @private\n */\nexport const SETTING_DATA = 'settingId';\n\n/**\n * @summary Setting item template, by type\n * @constant\n * @private\n */\nexport const SETTINGS_TEMPLATE_ = {\n  options: (setting, optionsCurrent) => `\n      <span class=\"psv-settings-item-label\">${setting.label}</span>\n      <span class=\"psv-settings-item-value\">${optionsCurrent(setting)}</span>\n      <span class=\"psv-settings-item-icon\">${chevron}</span>\n    `,\n  toggle : setting => `\n      <span class=\"psv-settings-item-label\">${setting.label}</span>\n      <span class=\"psv-settings-item-value\">${setting.active() ? switchOn : switchOff}</span>\n    `,\n};\n\n/**\n * @summary Settings list template\n * @param {PSV.plugins.SettingsPlugin.Setting[]} settings\n * @param {string} title\n * @param {string} dataKey\n * @param {function} optionsCurrent\n * @returns {string}\n * @constant\n * @private\n */\nexport const SETTINGS_TEMPLATE = (settings, title, dataKey, optionsCurrent) => `\n<div class=\"psv-panel-menu\">\n  <h1 class=\"psv-panel-menu-title\">${icon} ${title}</h1>\n  <ul class=\"psv-panel-menu-list\">\n    ${settings.map(s => `\n      <li class=\"psv-panel-menu-item\" data-${dataKey}=\"${s.id}\">\n        ${SETTINGS_TEMPLATE_[s.type](s, optionsCurrent)}\n      </li>\n    `).join('')}\n  </ul>\n</div>\n`;\n\n/**\n * @summary Settings options template\n * @param {PSV.plugins.SettingsPlugin.OptionsSetting} setting\n * @param {string} title\n * @param {string} dataKey\n * @param {function} optionActive\n * @returns {string}\n * @constant\n * @private\n */\nexport const SETTING_OPTIONS_TEMPLATE = (setting, title, dataKey, optionActive) => `\n<div class=\"psv-panel-menu\">\n  <h1 class=\"psv-panel-menu-title\">${icon} ${title}</h1>\n  <ul class=\"psv-panel-menu-list\">\n    <li class=\"psv-panel-menu-item psv-settings-item--header\" data-${dataKey}=\"__back\">\n      <span class=\"psv-settings-item-icon\">${chevron}</span>\n      <span class=\"psv-settings-item-label\">${setting.label}</span>\n    </li>\n    ${setting.options().map(s => `\n      <li class=\"psv-panel-menu-item\" data-${dataKey}=\"${s.id}\">\n        <span class=\"psv-settings-item-icon\">${optionActive(s) ? check : ''}</span>\n        <span class=\"psv-settings-item-value\">${s.label}</span>\n      </li>\n    `).join('')}\n  </ul>\n</div>\n`;\n","import { AbstractButton, CONSTANTS } from '../..';\nimport { ID_PANEL } from './constants';\nimport icon from './settings.svg';\n\n/**\n * @summary Navigation bar settings button class\n * @extends PSV.buttons.AbstractButton\n * @memberof PSV.buttons\n */\nexport class SettingsButton extends AbstractButton {\n\n  static id = 'settings';\n  static icon = icon;\n\n  /**\n   * @param {PSV.components.Navbar} navbar\n   */\n  constructor(navbar) {\n    super(navbar, 'psv-button--hover-scale psv-settings-button', true);\n\n    /**\n     * @type {PSV.plugins.SettingsPlugin}\n     * @private\n     * @readonly\n     */\n    this.plugin = this.psv.getPlugin('settings');\n\n    /**\n     * @member {HTMLElement}\n     * @private\n     * @readonly\n     */\n    this.badge = document.createElement('div');\n    this.badge.className = 'psv-settings-badge';\n    this.badge.style.display = 'none';\n    this.container.appendChild(this.badge);\n\n    if (this.plugin) {\n      this.psv.on(CONSTANTS.EVENTS.OPEN_PANEL, this);\n      this.psv.on(CONSTANTS.EVENTS.CLOSE_PANEL, this);\n    }\n  }\n\n  /**\n   * @override\n   */\n  destroy() {\n    this.psv.off(CONSTANTS.EVENTS.OPEN_PANEL, this);\n    this.psv.off(CONSTANTS.EVENTS.CLOSE_PANEL, this);\n\n    delete this.plugin;\n\n    super.destroy();\n  }\n\n  /**\n   * @override\n   */\n  isSupported() {\n    return !!this.plugin;\n  }\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  handleEvent(e) {\n    /* eslint-disable */\n    switch (e.type) {\n      // @formatter:off\n      case CONSTANTS.EVENTS.OPEN_PANEL:  this.toggleActive(e.args[0] === ID_PANEL); break;\n      case CONSTANTS.EVENTS.CLOSE_PANEL: this.toggleActive(false); break;\n      // @formatter:on\n    }\n    /* eslint-enable */\n  }\n\n  /**\n   * @override\n   * @description Toggles settings\n   */\n  onClick() {\n    this.plugin.toggleSettings();\n  }\n\n  /**\n   * @summary Changes the badge value\n   * @param {string} value\n   */\n  setBadge(value) {\n    this.badge.innerText = value;\n    this.badge.style.display = value ? '' : 'none';\n  }\n\n}\n","import { AbstractPlugin, DEFAULTS, PSVError, registerButton, utils } from '../..';\nimport {\n  EVENTS,\n  ID_PANEL,\n  SETTING_DATA,\n  SETTING_OPTIONS_TEMPLATE,\n  SETTINGS_TEMPLATE,\n  SETTINGS_TEMPLATE_\n} from './constants';\nimport { SettingsButton } from './SettingsButton';\nimport './style.scss';\n\n\n/**\n * @typedef {Object} PSV.plugins.SettingsPlugin.Setting\n * @summary Description of a setting\n * @property {string} id - identifier of the setting\n * @property {string} label - label of the setting\n * @property {'options' | 'toggle'} type - type of the setting\n * @property {function} [badge] - function which returns the value of the button badge\n */\n\n/**\n * @typedef {PSV.plugins.SettingsPlugin.Setting} PSV.plugins.SettingsPlugin.OptionsSetting\n * @summary Description of a 'options' setting\n * @property {'options'} type - type of the setting\n * @property {function} current - function which returns the current option id\n * @property {function} options - function which the possible options as an array of {@link PSV.plugins.SettingsPlugin.Option}\n * @property {function} apply - function called with the id of the selected option\n */\n\n/**\n * @typedef {PSV.plugins.SettingsPlugin.Setting} PSV.plugins.SettingsPlugin.ToggleSetting\n * @summary Description of a 'toggle' setting\n * @property {'toggle'} type - type of the setting\n * @property {function} active - function which return whereas the setting is active or not\n * @property {function} toggle - function called when the setting is toggled\n */\n\n/**\n * @typedef {Object} PSV.plugins.SettingsPlugin.Option\n * @summary Option of an 'option' setting\n * @property {string} id - identifier of the option\n * @property {string} label - label of the option\n */\n\n\n// add settings button\nDEFAULTS.lang[SettingsButton.id] = 'Settings';\nregisterButton(SettingsButton, 'fullscreen:left');\n\n\nexport { EVENTS } from './constants';\n\n\n/**\n * @summary Adds a button to access various settings.\n * @extends PSV.plugins.AbstractPlugin\n * @memberof PSV.plugins\n */\nexport class SettingsPlugin extends AbstractPlugin {\n\n  static id = 'settings';\n\n  /**\n   * @param {PSV.Viewer} psv\n   */\n  constructor(psv) {\n    super(psv);\n\n    /**\n     * @type {PSV.plugins.SettingsPlugin.Setting[]}\n     * @private\n     */\n    this.settings = [];\n  }\n\n  /**\n   * @package\n   */\n  init() {\n    super.init();\n\n    // buttons are initialized just after plugins\n    setTimeout(() => this.updateBadge());\n  }\n\n  /**\n   * @package\n   */\n  destroy() {\n    delete this.settings;\n\n    super.destroy();\n  }\n\n  /**\n   * @summary Registers a new setting\n   * @param {PSV.plugins.SettingsPlugin.Setting} setting\n   */\n  addSetting(setting) {\n    if (!setting.id) {\n      throw new PSVError('Missing setting id');\n    }\n    if (!setting.type) {\n      throw new PSVError('Missing setting type');\n    }\n    if (!SETTINGS_TEMPLATE_[setting.type]) {\n      throw new PSVError('Unsupported setting type');\n    }\n\n    if (setting.badge && this.settings.some(s => s.badge)) {\n      utils.logWarn('More than one setting with a badge are declared, the result is unpredictable.');\n    }\n\n    this.settings.push(setting);\n\n    if (this.psv.panel.prop.contentId === ID_PANEL) {\n      this.showSettings();\n    }\n\n    this.updateBadge();\n  }\n\n  /**\n   * @summary Removes a setting\n   * @param {string} id\n   */\n  removeSetting(id) {\n    let idx = -1;\n    // FIXME use findIndex, one day, when IE11 is totally dead\n    this.settings.some((setting, i) => {\n      if (setting.id === id) {\n        idx = i;\n        return true;\n      }\n      return false;\n    });\n    if (idx !== -1) {\n      this.settings.splice(idx, 1);\n\n      if (this.psv.panel.prop.contentId === ID_PANEL) {\n        this.showSettings();\n      }\n\n      this.updateBadge();\n    }\n  }\n\n  /**\n   * @summary Toggles the settings panel\n   */\n  toggleSettings() {\n    if (this.psv.panel.prop.contentId === ID_PANEL) {\n      this.hideSettings();\n    }\n    else {\n      this.showSettings();\n    }\n  }\n\n  /**\n   * @summary Hides the settings panel\n   */\n  hideSettings() {\n    this.psv.panel.hide(ID_PANEL);\n  }\n\n  /**\n   * @summary Shows the settings panel\n   */\n  showSettings() {\n    this.psv.panel.show({\n      id          : ID_PANEL,\n      content     : SETTINGS_TEMPLATE(\n        this.settings,\n        this.psv.config.lang[SettingsButton.id],\n        utils.dasherize(SETTING_DATA),\n        (setting) => { // retrocompatibility with \"current\" returning a label\n          const current = setting.current();\n          const option = setting.options().find(opt => opt.id === current);\n          return option?.label || current;\n        }\n      ),\n      noMargin    : true,\n      clickHandler: (e) => {\n        const li = e.target ? utils.getClosest(e.target, 'li') : undefined;\n        const settingId = li ? li.dataset[SETTING_DATA] : undefined;\n        const setting = this.settings.find(s => s.id === settingId);\n\n        if (setting) {\n          switch (setting.type) {\n            case 'toggle':\n              setting.toggle();\n              this.trigger(EVENTS.SETTING_CHANGED, setting.id, setting.active());\n              this.showSettings();\n              this.updateBadge();\n              break;\n\n            case 'options':\n              this.__showOptions(setting);\n              break;\n\n            default:\n            // noop\n          }\n        }\n      },\n    });\n  }\n\n  /**\n   * @summary Shows setting options panel\n   * @param {PSV.plugins.SettingsPlugin.OptionsSetting} setting\n   * @private\n   */\n  __showOptions(setting) {\n    const current = setting.current();\n\n    this.psv.panel.show({\n      id          : ID_PANEL,\n      content     : SETTING_OPTIONS_TEMPLATE(\n        setting,\n        this.psv.config.lang[SettingsButton.id],\n        utils.dasherize(SETTING_DATA),\n        (option) => { // retrocompatibility with options having an \"active\" flag\n          return 'active' in option ? option.active : option.id === current;\n        }\n      ),\n      noMargin    : true,\n      clickHandler: (e) => {\n        const li = e.target ? utils.getClosest(e.target, 'li') : undefined;\n        const optionId = li ? li.dataset[SETTING_DATA] : undefined;\n\n        if (optionId === '__back') {\n          this.showSettings();\n        }\n        else {\n          setting.apply(optionId);\n          this.trigger(EVENTS.SETTING_CHANGED, setting.id, setting.current());\n          this.hideSettings();\n          this.updateBadge();\n        }\n      },\n    });\n  }\n\n  /**\n   * @summary Updates the badge in the button\n   */\n  updateBadge() {\n    const value = this.settings.find(s => s.badge)?.badge();\n    this.psv.navbar.getButton(SettingsButton.id, false)?.setBadge(value);\n  }\n\n}\n"],"names":["EVENTS","SETTING_CHANGED","ID_PANEL","SETTING_DATA","SETTINGS_TEMPLATE_","options","setting","optionsCurrent","label","chevron","toggle","active","switchOn","switchOff","SETTINGS_TEMPLATE","settings","title","dataKey","icon","map","s","id","type","join","SETTING_OPTIONS_TEMPLATE","optionActive","check","SettingsButton","navbar","plugin","psv","getPlugin","badge","document","createElement","className","style","display","container","appendChild","on","CONSTANTS","OPEN_PANEL","CLOSE_PANEL","destroy","off","isSupported","handleEvent","e","toggleActive","args","onClick","toggleSettings","setBadge","value","innerText","AbstractButton","DEFAULTS","lang","registerButton","SettingsPlugin","init","setTimeout","updateBadge","addSetting","PSVError","some","utils","logWarn","push","panel","prop","contentId","showSettings","removeSetting","idx","i","splice","hideSettings","hide","show","content","config","dasherize","current","option","find","opt","noMargin","clickHandler","li","target","getClosest","undefined","settingId","dataset","trigger","__showOptions","optionId","apply","getButton","AbstractPlugin"],"mappings":"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"}