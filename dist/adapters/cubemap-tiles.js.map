{"version":3,"file":"cubemap-tiles.js","sources":["../../src/adapters/tiles-shared/Task.js","../../src/adapters/tiles-shared/Queue.js","../../src/adapters/tiles-shared/utils.js","../../src/adapters/cubemap-tiles/index.js"],"sourcesContent":["/**\n * @summary Loading task\n * @memberOf PSV.adapters\n * @private\n */\nexport class Task {\n\n  static STATUS = {\n    DISABLED : -1,\n    PENDING  : 0,\n    RUNNING  : 1,\n    CANCELLED: 2,\n    DONE     : 3,\n    ERROR    : 4,\n  };\n\n  /**\n   * @param {string} id\n   * @param {number} priority\n   * @param {function(Task): Promise} fn\n   */\n  constructor(id, priority, fn) {\n    this.id = id;\n    this.priority = priority;\n    this.fn = fn;\n    this.status = Task.STATUS.PENDING;\n  }\n\n  start() {\n    this.status = Task.STATUS.RUNNING;\n    return this.fn(this)\n      .then(() => {\n        this.status = Task.STATUS.DONE;\n      }, () => {\n        this.status = Task.STATUS.ERROR;\n      });\n  }\n\n  cancel() {\n    this.status = Task.STATUS.CANCELLED;\n  }\n\n  isCancelled() {\n    return this.status === Task.STATUS.CANCELLED;\n  }\n\n}\n","import { Task } from './Task';\n\n/**\n * @summary Loading queue\n * @memberOf PSV.adapters\n * @private\n */\nexport class Queue {\n\n  /**\n   * @param {int} concurency\n   */\n  constructor(concurency = 4) {\n    this.concurency = concurency;\n    this.runningTasks = {};\n    this.tasks = {};\n  }\n\n  enqueue(task) {\n    this.tasks[task.id] = task;\n  }\n\n  clear() {\n    Object.values(this.tasks).forEach(task => task.cancel());\n    this.tasks = {};\n    this.runningTasks = {};\n  }\n\n  setPriority(taskId, priority) {\n    const task = this.tasks[taskId];\n    if (task) {\n      task.priority = priority;\n      if (task.status === Task.STATUS.DISABLED) {\n        task.status = Task.STATUS.PENDING;\n      }\n    }\n  }\n\n  disableAllTasks() {\n    Object.values(this.tasks).forEach((task) => {\n      task.status = Task.STATUS.DISABLED;\n    });\n  }\n\n  start() {\n    if (Object.keys(this.runningTasks).length >= this.concurency) {\n      return;\n    }\n\n    const nextTask = Object.values(this.tasks)\n      .filter(task => task.status === Task.STATUS.PENDING)\n      .sort((a, b) => b.priority - a.priority)\n      .pop();\n\n    if (nextTask) {\n      this.runningTasks[nextTask.id] = true;\n\n      nextTask.start()\n        .then(() => {\n          if (!nextTask.isCancelled()) {\n            delete this.tasks[nextTask.id];\n            delete this.runningTasks[nextTask.id];\n            this.start();\n          }\n        });\n\n      this.start(); // start tasks until max concurrency is reached\n    }\n  }\n\n}\n","import * as THREE from 'three';\nimport { SYSTEM, utils } from '../..';\n\n/**\n * @summary Generates an material for errored tiles\n * @memberOf PSV.adapters\n * @return {external:THREE.MeshBasicMaterial}\n * @private\n */\nexport function buildErrorMaterial(width, height) {\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n\n  const ctx = canvas.getContext('2d');\n\n  ctx.fillStyle = '#333';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.font = `${canvas.width / 5}px serif`;\n  ctx.fillStyle = '#a22';\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n  ctx.fillText('âš ', canvas.width / 2, canvas.height / 2);\n\n  const texture = new THREE.CanvasTexture(canvas);\n  return new THREE.MeshBasicMaterial({ map: texture });\n}\n\n/**\n * @summary Create the texture for the base image\n * @memberOf PSV.adapters\n * @param {HTMLImageElement} img\n * @param {boolean} blur\n * @param {function} getHeight\n * @return {external:THREE.Texture}\n * @private\n */\nexport function createBaseTexture(img, blur, getHeight) {\n  if (blur || img.width > SYSTEM.maxTextureWidth) {\n    const ratio = Math.min(1, SYSTEM.getMaxCanvasWidth() / img.width);\n\n    const buffer = document.createElement('canvas');\n    buffer.width = img.width * ratio;\n    buffer.height = getHeight(img.width);\n\n    const ctx = buffer.getContext('2d');\n    if (blur) {\n      ctx.filter = 'blur(1px)';\n    }\n    ctx.drawImage(img, 0, 0, buffer.width, buffer.height);\n\n    return utils.createTexture(buffer);\n  }\n\n  return utils.createTexture(img);\n}\n\n/**\n * @summary Creates a wireframe geometry, for debug\n * @memberOf PSV.adapters\n * @param {THREE.BufferGeometry} geometry\n * @return {THREE.Object3D}\n * @private\n */\nexport function createWireFrame(geometry) {\n  const wireframe = new THREE.WireframeGeometry(geometry);\n  const line = new THREE.LineSegments(wireframe);\n  line.material.depthTest = false;\n  line.material.opacity = 0.25;\n  line.material.transparent = true;\n  return line;\n}\n\n/**\n * @summary Creates a small red sphere, for debug\n * @memberOf PSV.adapters\n * @return {THREE.Object3D}\n * @private\n */\nexport function createDot(x, y, z) {\n  const geom = new THREE.SphereGeometry(0.1);\n  const material = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n  const mesh = new THREE.Mesh(geom, material);\n  mesh.position.set(x, y, z);\n  return mesh;\n}\n","import * as THREE from 'three';\nimport { CONSTANTS, PSVError, utils } from '../..';\nimport { CUBE_HASHMAP, CubemapAdapter } from '../cubemap';\nimport { Queue } from '../tiles-shared/Queue';\nimport { Task } from '../tiles-shared/Task';\nimport { buildErrorMaterial, createBaseTexture } from '../tiles-shared/utils';\n\nif (!CubemapAdapter) {\n  throw new PSVError('CubemapAdapter is missing, please load cubemap.js before cubemap-tiles.js');\n}\n\n\n/**\n * @callback TileUrl\n * @summary Function called to build a tile url\n * @memberOf PSV.adapters.CubemapTilesAdapter\n * @param {'left'|'front'|'right'|'back'|'top'|'bottom'} face\n * @param {int} col\n * @param {int} row\n * @returns {string}\n */\n\n/**\n * @typedef {Object} PSV.adapters.CubemapTilesAdapter.Panorama\n * @summary Configuration of a tiled cubemap\n * @property {PSV.adapters.CubemapAdapter.Cubemap} [baseUrl] - low resolution panorama loaded before tiles\n * @property {int} faceSize - size of a face\n * @property {int} nbTiles - number of tiles on a side of a face\n * @property {PSV.adapters.CubemapTilesAdapter.TileUrl} tileUrl - function to build a tile url\n */\n\n/**\n * @typedef {Object} PSV.adapters.CubemapTilesAdapter.Options\n * @property {boolean} [flipTopBottom=false] - set to true if the top and bottom faces are not correctly oriented\n * @property {boolean} [showErrorTile=true] - shows a warning sign on tiles that cannot be loaded\n * @property {boolean} [baseBlur=true] - applies a blur to the low resolution panorama\n */\n\n/**\n * @typedef {Object} PSV.adapters.CubemapTilesAdapter.Tile\n * @private\n * @property {int} face\n * @property {int} col\n * @property {int} row\n * @property {float} angle\n */\n\n\nconst CUBE_SEGMENTS = 16;\nconst NB_VERTICES_BY_FACE = 6;\nconst NB_VERTICES_BY_PLANE = NB_VERTICES_BY_FACE * CUBE_SEGMENTS * CUBE_SEGMENTS;\nconst NB_VERTICES = 6 * NB_VERTICES_BY_PLANE;\nconst NB_GROUPS_BY_FACE = CUBE_SEGMENTS * CUBE_SEGMENTS;\n\nfunction tileId(tile) {\n  return `${tile.face}:${tile.col}x${tile.row}`;\n}\n\nconst frustum = new THREE.Frustum();\nconst projScreenMatrix = new THREE.Matrix4();\nconst vertexPosition = new THREE.Vector3();\n\n/**\n * @summary Adapter for tiled cubemaps\n * @memberof PSV.adapters\n */\nexport class CubemapTilesAdapter extends CubemapAdapter {\n\n  static id = 'cubemap-tiles';\n  static supportsTransition = false;\n  static supportsPreload = false;\n\n  /**\n   * @param {PSV.Viewer} psv\n   * @param {PSV.adapters.CubemapTilesAdapter.Options} options\n   */\n  constructor(psv, options) {\n    super(psv);\n\n    /**\n     * @member {PSV.adapters.CubemapTilesAdapter.Options}\n     * @private\n     */\n    this.config = {\n      flipTopBottom: false,\n      showErrorTile: true,\n      baseBlur     : true,\n      ...options,\n    };\n\n    /**\n     * @member {external:THREE.MeshBasicMaterial[]}\n     * @private\n     */\n    this.materials = [];\n\n    /**\n     * @member {PSV.adapters.Queue}\n     * @private\n     */\n    this.queue = new Queue();\n\n    /**\n     * @type {Object}\n     * @property {int} tileSize - size in pixels of a tile\n     * @property {int} facesByTile - number of mesh faces by tile\n     * @property {Record<string, boolean>} tiles - loaded tiles\n     * @property {external:THREE.BoxGeometry} geom\n     * @property {*} originalUvs\n     * @property {external:THREE.MeshBasicMaterial} errorMaterial\n     * @private\n     */\n    this.prop = {\n      tileSize     : 0,\n      facesByTile  : 0,\n      tiles        : {},\n      geom         : null,\n      originalUvs  : null,\n      errorMaterial: null,\n    };\n\n    /**\n     * @member {external:THREE.ImageLoader}\n     * @private\n     */\n    this.loader = new THREE.ImageLoader();\n    if (this.psv.config.withCredentials) {\n      this.loader.setWithCredentials(true);\n    }\n    if (this.psv.config.requestHeaders && typeof this.psv.config.requestHeaders === 'object') {\n      this.loader.setRequestHeader(this.psv.config.requestHeaders);\n    }\n\n    this.psv.on(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n    this.psv.on(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n  }\n\n  destroy() {\n    this.psv.off(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n    this.psv.off(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n\n    this.__cleanup();\n\n    this.prop.errorMaterial?.map?.dispose();\n    this.prop.errorMaterial?.dispose();\n\n    delete this.queue;\n    delete this.loader;\n    delete this.prop.geom;\n    delete this.prop.originalUvs;\n    delete this.prop.errorMaterial;\n\n    super.destroy();\n  }\n\n  handleEvent(e) {\n    /* eslint-disable */\n    switch (e.type) {\n      case CONSTANTS.EVENTS.POSITION_UPDATED:\n      case CONSTANTS.EVENTS.ZOOM_UPDATED:\n        this.__refresh();\n        break;\n    }\n    /* eslint-enable */\n  }\n\n  /**\n   * @summary Clears loading queue, dispose all materials\n   * @private\n   */\n  __cleanup() {\n    this.queue.clear();\n    this.prop.tiles = {};\n\n    this.materials.forEach((mat) => {\n      mat?.map?.dispose();\n      mat?.dispose();\n    });\n    this.materials.length = 0;\n  }\n\n  /**\n   * @override\n   * @param {PSV.adapters.CubemapTilesAdapter.Panorama} panorama\n   * @returns {Promise.<PSV.TextureData>}\n   */\n  loadTexture(panorama) {\n    if (typeof panorama !== 'object' || !panorama.faceSize || !panorama.nbTiles || !panorama.tileUrl) {\n      return Promise.reject(new PSVError('Invalid panorama configuration, are you using the right adapter?'));\n    }\n    if (panorama.nbTiles > CUBE_SEGMENTS) {\n      return Promise.reject(new PSVError(`Panorama nbTiles must not be greater than ${CUBE_SEGMENTS}.`));\n    }\n    if (!utils.isPowerOfTwo(panorama.nbTiles)) {\n      return Promise.reject(new PSVError('Panorama nbTiles must be power of 2.'));\n    }\n\n    this.prop.tileSize = panorama.faceSize / panorama.nbTiles;\n    this.prop.facesByTile = CUBE_SEGMENTS / panorama.nbTiles;\n\n    if (this.prop.geom) {\n      this.prop.geom.setAttribute('uv', this.prop.originalUvs.clone());\n    }\n\n    if (panorama.baseUrl) {\n      return super.loadTexture(panorama.baseUrl)\n        .then(textureData => ({\n          panorama: panorama,\n          texture : textureData.texture,\n        }));\n    }\n    else {\n      return Promise.resolve({ panorama });\n    }\n  }\n\n  /**\n   * @override\n   */\n  createMesh(scale = 1) {\n    const cubeSize = CONSTANTS.SPHERE_RADIUS * 2 * scale;\n    const geometry = new THREE.BoxGeometry(cubeSize, cubeSize, cubeSize, CUBE_SEGMENTS, CUBE_SEGMENTS, CUBE_SEGMENTS)\n      .scale(1, 1, -1)\n      .toNonIndexed();\n\n    geometry.clearGroups();\n    for (let i = 0, k = 0; i < NB_VERTICES; i += NB_VERTICES_BY_FACE) {\n      geometry.addGroup(i, NB_VERTICES_BY_FACE, k++);\n    }\n\n    this.prop.geom = geometry;\n    this.prop.originalUvs = geometry.getAttribute('uv').clone();\n\n    return new THREE.Mesh(geometry, this.materials);\n  }\n\n  /**\n   * @summary Applies the base texture and starts the loading of tiles\n   * @override\n   */\n  setTexture(mesh, textureData) {\n    this.__cleanup();\n\n    if (textureData.texture) {\n      for (let i = 0; i < 6; i++) {\n        const texture = textureData.texture[i];\n\n        if (this.config.flipTopBottom && (i === 2 || i === 3)) {\n          texture.center = new THREE.Vector2(0.5, 0.5);\n          texture.rotation = Math.PI;\n        }\n\n        const material = new THREE.MeshBasicMaterial({ map: texture });\n\n        for (let j = 0; j < NB_GROUPS_BY_FACE; j++) {\n          this.materials.push(material);\n        }\n      }\n    }\n    else {\n      const material = new THREE.MeshBasicMaterial({ opacity: 0, transparent: true });\n\n      for (let i = 0; i < 6; i++) {\n        for (let j = 0; j < NB_GROUPS_BY_FACE; j++) {\n          this.materials.push(material);\n        }\n      }\n    }\n\n    // this.psv.renderer.scene.add(createWireFrame(this.prop.geom));\n\n    setTimeout(() => this.__refresh(true));\n  }\n\n  /**\n   * @summary Compute visible tiles and load them\n   * @private\n   */\n  __refresh(init = false) { // eslint-disable-line no-unused-vars\n    const panorama = this.psv.config.panorama;\n\n    if (!panorama) {\n      return;\n    }\n\n    const camera = this.psv.renderer.camera;\n    camera.updateMatrixWorld();\n    projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n    frustum.setFromProjectionMatrix(projScreenMatrix);\n\n    const verticesPosition = this.prop.geom.getAttribute('position');\n    const tilesToLoad = [];\n\n    for (let face = 0; face < 6; face++) {\n      for (let col = 0; col < panorama.nbTiles; col++) {\n        for (let row = 0; row < panorama.nbTiles; row++) {\n          // for each tile, find the vertices corresponding to the four corners\n          // if at least one vertex is visible, the tile must be loaded\n          // for larger tiles we also test the four edges centers and the tile center\n          const verticesIndex = [];\n\n          // top-left\n          const v0 = face * NB_VERTICES_BY_PLANE\n            + row * this.prop.facesByTile * CUBE_SEGMENTS * NB_VERTICES_BY_FACE\n            + col * this.prop.facesByTile * NB_VERTICES_BY_FACE;\n\n          // bottom-left\n          const v1 = v0 + CUBE_SEGMENTS * NB_VERTICES_BY_FACE * (this.prop.facesByTile - 1) + 1;\n\n          // bottom-right\n          const v2 = v1 + this.prop.facesByTile * NB_VERTICES_BY_FACE - 3;\n\n          // top-right\n          const v3 = v0 + this.prop.facesByTile * NB_VERTICES_BY_FACE - 1;\n\n          verticesIndex.push(v0, v1, v2, v3);\n\n          if (this.prop.facesByTile >= CUBE_SEGMENTS / 2) {\n            // top-center\n            const v4 = v0 + this.prop.facesByTile / 2 * NB_VERTICES_BY_FACE - 1;\n\n            // bottom-center\n            const v5 = v1 + this.prop.facesByTile / 2 * NB_VERTICES_BY_FACE - 3;\n\n            // left-center\n            const v6 = v0 + CUBE_SEGMENTS * NB_VERTICES_BY_FACE * (this.prop.facesByTile / 2 - 1) + 1;\n\n            // right-center\n            const v7 = v6 + this.prop.facesByTile * NB_VERTICES_BY_FACE - 3;\n\n            // center-center\n            const v8 = v6 + this.prop.facesByTile / 2 * NB_VERTICES_BY_FACE;\n\n            verticesIndex.push(v4, v5, v6, v7, v8);\n          }\n\n          // if (init && face === 5 && col === 0 && row === 0) {\n          //   verticesIndex.forEach((vertexIdx) => {\n          //     this.psv.renderer.scene.add(createDot(\n          //       verticesPosition.getX(vertexIdx),\n          //       verticesPosition.getY(vertexIdx),\n          //       verticesPosition.getZ(vertexIdx)\n          //     ));\n          //   });\n          // }\n\n          const vertexVisible = verticesIndex.some((vertexIdx) => {\n            vertexPosition.set(\n              verticesPosition.getX(vertexIdx),\n              verticesPosition.getY(vertexIdx),\n              verticesPosition.getZ(vertexIdx)\n            );\n            vertexPosition.applyEuler(this.psv.renderer.meshContainer.rotation);\n            return frustum.containsPoint(vertexPosition);\n          });\n\n          if (vertexVisible) {\n            const angle = vertexPosition.angleTo(this.psv.prop.direction);\n            tilesToLoad.push({ face, col, row, angle });\n          }\n        }\n      }\n    }\n\n    this.__loadTiles(tilesToLoad);\n  }\n\n  /**\n   * @summary Loads tiles and change existing tiles priority\n   * @param {PSV.adapters.CubemapTilesAdapter.Tile[]} tiles\n   * @private\n   */\n  __loadTiles(tiles) {\n    this.queue.disableAllTasks();\n\n    tiles.forEach((tile) => {\n      const id = tileId(tile);\n\n      if (this.prop.tiles[id]) {\n        this.queue.setPriority(id, tile.angle);\n      }\n      else {\n        this.prop.tiles[id] = true;\n        this.queue.enqueue(new Task(id, tile.angle, task => this.__loadTile(tile, task)));\n      }\n    });\n\n    this.queue.start();\n  }\n\n  /**\n   * @summary Loads and draw a tile\n   * @param {PSV.adapters.CubemapTilesAdapter.Tile} tile\n   * @param {PSV.adapters.Task} task\n   * @return {Promise}\n   * @private\n   */\n  __loadTile(tile, task) {\n    const panorama = this.psv.config.panorama;\n\n    let { col, row } = tile;\n    if (this.config.flipTopBottom && (tile.face === 2 || tile.face === 3)) {\n      col = panorama.nbTiles - col - 1;\n      row = panorama.nbTiles - row - 1;\n    }\n    const url = panorama.tileUrl(CUBE_HASHMAP[tile.face], col, row);\n\n    if (this.psv.config.requestHeaders && typeof this.psv.config.requestHeaders === 'function') {\n      this.loader.setRequestHeader(this.psv.config.requestHeaders(url));\n    }\n\n    return new Promise((resolve, reject) => {\n      this.loader.load(url, resolve, undefined, reject);\n    })\n      .then((image) => {\n        if (!task.isCancelled()) {\n          const material = new THREE.MeshBasicMaterial({ map: utils.createTexture(image) });\n          this.__swapMaterial(tile.face, tile.col, tile.row, material);\n          this.psv.needsUpdate();\n        }\n      })\n      .catch(() => {\n        if (!task.isCancelled() && this.config.showErrorTile) {\n          if (!this.prop.errorMaterial) {\n            this.prop.errorMaterial = buildErrorMaterial(this.prop.tileSize, this.prop.tileSize);\n          }\n          this.__swapMaterial(tile.face, tile.col, tile.row, this.prop.errorMaterial);\n          this.psv.needsUpdate();\n        }\n      });\n  }\n\n  /**\n   * @summary Applies a new texture to the faces\n   * @param {int} face\n   * @param {int} col\n   * @param {int} row\n   * @param {external:THREE.MeshBasicMaterial} material\n   * @private\n   */\n  __swapMaterial(face, col, row, material) {\n    const uvs = this.prop.geom.getAttribute('uv');\n\n    for (let c = 0; c < this.prop.facesByTile; c++) {\n      for (let r = 0; r < this.prop.facesByTile; r++) {\n        // position of the face (two triangles of the same square)\n        const faceCol = col * this.prop.facesByTile + c;\n        const faceRow = row * this.prop.facesByTile + r;\n\n        // first vertex for this face (6 vertices in total)\n        const firstVertex = NB_VERTICES_BY_PLANE * face + 6 * (CUBE_SEGMENTS * faceRow + faceCol);\n\n        // swap material\n        const matIndex = this.prop.geom.groups.find(g => g.start === firstVertex).materialIndex;\n        this.materials[matIndex] = material;\n\n        // define new uvs\n        let top = 1 - r / this.prop.facesByTile;\n        let bottom = 1 - (r + 1) / this.prop.facesByTile;\n        let left = c / this.prop.facesByTile;\n        let right = (c + 1) / this.prop.facesByTile;\n\n        if (this.config.flipTopBottom && (face === 2 || face === 3)) {\n          top = 1 - top;\n          bottom = 1 - bottom;\n          left = 1 - left;\n          right = 1 - right;\n        }\n\n        uvs.setXY(firstVertex, left, top);\n        uvs.setXY(firstVertex + 1, left, bottom);\n        uvs.setXY(firstVertex + 2, right, top);\n        uvs.setXY(firstVertex + 3, left, bottom);\n        uvs.setXY(firstVertex + 4, right, bottom);\n        uvs.setXY(firstVertex + 5, right, top);\n      }\n    }\n\n    uvs.needsUpdate = true;\n  }\n\n  /**\n   * @summary Create the texture for the base image\n   * @param {HTMLImageElement} img\n   * @return {external:THREE.Texture}\n   * @override\n   * @private\n   */\n  __createCubemapTexture(img) {\n    if (img.width !== img.height) {\n      utils.logWarn('Invalid base image, the width should equals the height');\n    }\n\n    return createBaseTexture(img, this.config.baseBlur, w => w);\n  }\n\n}\n"],"names":["Task","id","priority","fn","status","STATUS","PENDING","start","RUNNING","then","DONE","ERROR","cancel","CANCELLED","isCancelled","DISABLED","Queue","concurency","runningTasks","tasks","enqueue","task","clear","Object","values","forEach","setPriority","taskId","disableAllTasks","keys","length","nextTask","filter","sort","a","b","pop","buildErrorMaterial","width","height","canvas","document","createElement","ctx","getContext","fillStyle","fillRect","font","textAlign","textBaseline","fillText","texture","THREE","CanvasTexture","MeshBasicMaterial","map","createBaseTexture","img","blur","getHeight","SYSTEM","maxTextureWidth","ratio","Math","min","getMaxCanvasWidth","buffer","drawImage","utils","createTexture","CubemapAdapter","PSVError","CUBE_SEGMENTS","NB_VERTICES_BY_FACE","NB_VERTICES_BY_PLANE","NB_VERTICES","NB_GROUPS_BY_FACE","tileId","tile","face","col","row","frustum","Frustum","projScreenMatrix","Matrix4","vertexPosition","Vector3","CubemapTilesAdapter","psv","options","config","flipTopBottom","showErrorTile","baseBlur","materials","queue","prop","tileSize","facesByTile","tiles","geom","originalUvs","errorMaterial","loader","ImageLoader","withCredentials","setWithCredentials","requestHeaders","setRequestHeader","on","CONSTANTS","EVENTS","POSITION_UPDATED","ZOOM_UPDATED","destroy","off","__cleanup","dispose","handleEvent","e","type","__refresh","mat","loadTexture","panorama","faceSize","nbTiles","tileUrl","Promise","reject","isPowerOfTwo","setAttribute","clone","baseUrl","textureData","resolve","createMesh","scale","cubeSize","SPHERE_RADIUS","geometry","BoxGeometry","toNonIndexed","clearGroups","i","k","addGroup","getAttribute","Mesh","setTexture","mesh","center","Vector2","rotation","PI","material","j","push","opacity","transparent","setTimeout","init","camera","renderer","updateMatrixWorld","multiplyMatrices","projectionMatrix","matrixWorldInverse","setFromProjectionMatrix","verticesPosition","tilesToLoad","verticesIndex","v0","v1","v2","v3","v4","v5","v6","v7","v8","vertexVisible","some","vertexIdx","set","getX","getY","getZ","applyEuler","meshContainer","containsPoint","angle","angleTo","direction","__loadTiles","__loadTile","url","CUBE_HASHMAP","load","undefined","image","__swapMaterial","needsUpdate","catch","uvs","c","r","faceCol","faceRow","firstVertex","matIndex","groups","find","g","materialIndex","top","bottom","left","right","setXY","__createCubemapTexture","logWarn","w","supportsTransition","supportsPreload"],"mappings":"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"}