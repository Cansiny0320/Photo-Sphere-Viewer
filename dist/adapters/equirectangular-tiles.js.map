{"version":3,"file":"equirectangular-tiles.js","sources":["../../src/adapters/equirectangular-tiles/Task.js","../../src/adapters/equirectangular-tiles/Queue.js","../../src/adapters/equirectangular-tiles/index.js"],"sourcesContent":["/**\n * @summary Loading task\n * @memberOf PSV.adapters.EquirectangularTilesAdapter\n * @package\n */\nexport class Task {\n\n  static STATUS = {\n    PENDING  : 0,\n    RUNNING  : 1,\n    CANCELLED: 2,\n    DONE     : 3,\n    ERROR    : 4,\n  };\n\n  /**\n   * @param {string} id\n   * @param {number} priority\n   * @param {function(Task): Promise} fn\n   */\n  constructor(id, priority, fn) {\n    this.id = id;\n    this.priority = priority;\n    this.fn = fn;\n    this.status = Task.STATUS.PENDING;\n  }\n\n  start() {\n    this.status = Task.STATUS.RUNNING;\n    return this.fn(this)\n      .then(() => {\n        this.status = Task.STATUS.DONE;\n      }, () => {\n        this.status = Task.STATUS.ERROR;\n      });\n  }\n\n  cancel() {\n    this.status = Task.STATUS.CANCELLED;\n  }\n\n  isCancelled() {\n    return this.status === Task.STATUS.CANCELLED;\n  }\n\n}\n","import { Task } from './Task';\n\n/**\n * @summary Loading queue\n * @memberOf PSV.adapters.EquirectangularTilesAdapter\n * @package\n */\nexport class Queue {\n\n  /**\n   * @param {int} concurency\n   */\n  constructor(concurency) {\n    this.concurency = concurency;\n    this.runningTasks = {};\n    this.tasks = {};\n  }\n\n  enqueue(task) {\n    this.tasks[task.id] = task;\n  }\n\n  clear() {\n    Object.values(this.tasks).forEach(task => task.cancel());\n    this.tasks = {};\n    this.runningTasks = {};\n  }\n\n  setPriority(taskId, priority) {\n    if (this.tasks[taskId]) {\n      this.tasks[taskId].priority = priority;\n    }\n  }\n\n  setAllPriorities(priority) {\n    Object.values(this.tasks).forEach((task) => {\n      task.priority = priority;\n    });\n  }\n\n  start() {\n    if (Object.keys(this.runningTasks).length >= this.concurency) {\n      return;\n    }\n\n    const nextTask = Object.values(this.tasks)\n      .filter(task => task.status === Task.STATUS.PENDING && task.priority > 0)\n      .sort((a, b) => a.priority - b.priority)\n      .pop();\n\n    if (nextTask) {\n      this.runningTasks[nextTask.id] = true;\n\n      nextTask.start()\n        .then(() => {\n          if (!nextTask.isCancelled()) {\n            delete this.tasks[nextTask.id];\n            delete this.runningTasks[nextTask.id];\n            this.start();\n          }\n        });\n\n      this.start(); // start tasks until max concurrency is reached\n    }\n  }\n\n}\n","import * as THREE from 'three';\nimport { AbstractAdapter, CONSTANTS, PSVError, SYSTEM, utils } from '../..';\nimport { Queue } from './Queue';\nimport { Task } from './Task';\n\n\n/**\n * @callback TileUrl\n * @summary Function called to build a tile url\n * @memberOf PSV.adapters.EquirectangularTilesAdapter\n * @param {int} col\n * @param {int} row\n * @returns {string}\n */\n\n/**\n * @typedef {Object} PSV.adapters.EquirectangularTilesAdapter.Panorama\n * @summary Configuration of a tiled panorama\n * @property {string} [baseUrl] - low resolution panorama loaded before tiles\n * @property {int} width - complete panorama width (height is always width/2)\n * @property {int} cols - number of vertical tiles\n * @property {int} rows - number of horizontal tiles\n * @property {PSV.adapters.EquirectangularTilesAdapter.TileUrl} tileUrl - function to build a tile url\n */\n\n/**\n * @typedef {Object} PSV.adapters.EquirectangularTilesAdapter.Options\n * @property {boolean} [showErrorTile=true] - shows a warning sign on tiles that cannot be loaded\n * @property {boolean} [baseBlur=true] - applies a blur to the low resolution panorama\n */\n\n/**\n * @typedef {Object} PSV.adapters.EquirectangularTilesAdapter.Tile\n * @private\n * @property {int} col\n * @property {int} row\n * @property {int} angle\n */\n\n\nconst SPHERE_SEGMENTS = 64;\nconst NB_VERTICES = 3 * (SPHERE_SEGMENTS * 2 + (SPHERE_SEGMENTS / 2 - 2) * SPHERE_SEGMENTS * 2);\nconst NB_GROUPS = SPHERE_SEGMENTS * 2 + (SPHERE_SEGMENTS / 2 - 2) * SPHERE_SEGMENTS;\nconst QUEUE_CONCURENCY = 4;\n\nfunction tileId(tile) {\n  return `${tile.col}x${tile.row}`;\n}\n\nfunction powerOfTwo(x) {\n  return (Math.log(x) / Math.log(2)) % 1 === 0;\n}\n\n\n/**\n * @summary Adapter for tiled panoramas\n * @memberof PSV.adapters\n */\nexport class EquirectangularTilesAdapter extends AbstractAdapter {\n\n  static id = 'equirectangular-tiles';\n  static supportsTransition = false;\n\n  /**\n   * @param {PSV.Viewer} psv\n   * @param {PSV.adapters.EquirectangularTilesAdapter.Options} options\n   */\n  constructor(psv, options) {\n    super(psv);\n\n    /**\n     * @member {PSV.adapters.EquirectangularTilesAdapter.Options}\n     * @private\n     */\n    this.config = {\n      showErrorTile: true,\n      baseBlur     : true,\n      ...options,\n    };\n\n    /**\n     * @member {external:THREE.MeshBasicMaterial[]}\n     * @private\n     */\n    this.materials = [];\n\n    /**\n     * @member {PSV.adapters.EquirectangularTilesAdapter.Queue}\n     * @private\n     */\n    this.queue = new Queue(QUEUE_CONCURENCY);\n\n    /**\n     * @type {Object}\n     * @property {int} colSize - size in pixels of a column\n     * @property {int} rowSize - size in pixels of a row\n     * @property {int} facesByCol - number of mesh faces by column\n     * @property {int} facesByRow - number of mesh faces by row\n     * @property {Record<string, boolean>} tiles - loaded tiles\n     * @property {external:THREE.SphereGeometry} geom\n     * @property {*} originalUvs\n     * @property {external:THREE.MeshBasicMaterial} errorMaterial\n     * @private\n     */\n    this.prop = {\n      colSize      : 0,\n      rowSize      : 0,\n      facesByCol   : 0,\n      facesByRow   : 0,\n      tiles        : {},\n      geom         : null,\n      originalUvs  : null,\n      errorMaterial: null,\n    };\n\n    /**\n     * @member {external:THREE.ImageLoader}\n     * @private\n     */\n    this.loader = new THREE.ImageLoader();\n    if (this.psv.config.withCredentials) {\n      this.loader.setWithCredentials(true);\n    }\n    if (this.psv.config.requestHeaders && typeof this.psv.config.requestHeaders === 'object') {\n      this.loader.setRequestHeader(this.psv.config.requestHeaders);\n    }\n\n    this.psv.on(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n    this.psv.on(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n  }\n\n  destroy() {\n    this.psv.off(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n    this.psv.off(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n\n    this.__cleanup();\n\n    this.prop.errorMaterial?.map?.dispose();\n    this.prop.errorMaterial?.dispose();\n\n    delete this.queue;\n    delete this.loader;\n    delete this.prop.geom;\n    delete this.prop.originalUvs;\n    delete this.prop.errorMaterial;\n\n    super.destroy();\n  }\n\n  handleEvent(e) {\n    /* eslint-disable */\n    switch (e.type) {\n      case CONSTANTS.EVENTS.POSITION_UPDATED:\n      case CONSTANTS.EVENTS.ZOOM_UPDATED:\n        this.__refresh();\n        break;\n    }\n    /* eslint-enable */\n  }\n\n  /**\n   * @summary Clears loading queue, dispose all materials\n   * @private\n   */\n  __cleanup() {\n    this.queue.clear();\n    this.prop.tiles = {};\n\n    this.materials.forEach((mat) => {\n      mat?.map?.dispose();\n      mat?.dispose();\n    });\n    this.materials.length = 0;\n  }\n\n  /**\n   * @override\n   * @param {PSV.adapters.EquirectangularTilesAdapter.Panorama} panorama\n   * @returns {Promise.<PSV.TextureData>}\n   */\n  loadTexture(panorama) {\n    if (typeof panorama !== 'object' || !panorama.width || !panorama.cols || !panorama.rows || !panorama.tileUrl) {\n      return Promise.reject(new PSVError('Invalid panorama configuration, are you using the right adapter?'));\n    }\n    if (panorama.cols > SPHERE_SEGMENTS) {\n      return Promise.reject(new PSVError(`Panorama cols must not be greater than ${SPHERE_SEGMENTS}.`));\n    }\n    if (panorama.rows > SPHERE_SEGMENTS / 2) {\n      return Promise.reject(new PSVError(`Panorama rows must not be greater than ${SPHERE_SEGMENTS / 2}.`));\n    }\n    if (!powerOfTwo(panorama.cols) || !powerOfTwo(panorama.rows)) {\n      return Promise.reject(new PSVError('Panorama cols and rows must be powers of 2.'));\n    }\n\n    panorama.height = panorama.width / 2;\n\n    this.prop.colSize = panorama.width / panorama.cols;\n    this.prop.rowSize = panorama.height / panorama.rows;\n    this.prop.facesByCol = SPHERE_SEGMENTS / panorama.cols;\n    this.prop.facesByRow = SPHERE_SEGMENTS / 2 / panorama.rows;\n\n    this.__cleanup();\n\n    if (this.prop.geom) {\n      this.prop.geom.setAttribute('uv', this.prop.originalUvs.clone());\n    }\n\n    const panoData = {\n      fullWidth    : panorama.width,\n      fullHeight   : panorama.height,\n      croppedWidth : panorama.width,\n      croppedHeight: panorama.height,\n      croppedX     : 0,\n      croppedY     : 0,\n    };\n\n    if (panorama.baseUrl) {\n      return this.psv.textureLoader.loadImage(panorama.baseUrl, p => this.psv.loader.setProgress(p))\n        .then((img) => {\n          return {\n            texture : this.__createBaseTexture(img),\n            panoData: panoData,\n          };\n        });\n    }\n    else {\n      return Promise.resolve({\n        texture : null,\n        panoData: panoData,\n      });\n    }\n  }\n\n  /**\n   * @override\n   */\n  createMesh(scale = 1) {\n    const geometry = new THREE.SphereGeometry(CONSTANTS.SPHERE_RADIUS * scale, SPHERE_SEGMENTS, SPHERE_SEGMENTS / 2, -Math.PI / 2)\n      .toNonIndexed();\n\n    let i = 0;\n    let k = 0;\n\n    // first row\n    for (; i < SPHERE_SEGMENTS * 3; i += 3) {\n      geometry.addGroup(i, 3, k++);\n    }\n\n    // second to before last rows\n    for (; i < NB_VERTICES - SPHERE_SEGMENTS * 3; i += 6) {\n      geometry.addGroup(i, 6, k++);\n    }\n\n    // last row\n    for (; i < NB_VERTICES; i += 3) {\n      geometry.addGroup(i, 3, k++);\n    }\n\n    this.prop.geom = geometry;\n    this.prop.originalUvs = geometry.getAttribute('uv').clone();\n\n    const mesh = new THREE.Mesh(geometry, this.materials);\n    mesh.scale.set(-1, 1, 1);\n\n    return mesh;\n  }\n\n  /**\n   * @summary Applies the base texture and starts the loading of tiles\n   * @override\n   */\n  setTexture(mesh, textureData) {\n    if (textureData.texture) {\n      const material = new THREE.MeshBasicMaterial({\n        side: THREE.BackSide,\n        map : textureData.texture,\n      });\n\n      for (let i = 0; i < NB_GROUPS; i++) {\n        this.materials.push(material);\n      }\n    }\n\n    setTimeout(() => this.__refresh());\n  }\n\n  /**\n   * @summary Compute visible tiles and load them\n   * @private\n   */\n  __refresh() {\n    const viewerSize = this.psv.prop.size;\n    const panorama = this.psv.config.panorama;\n\n    if (!panorama) {\n      return;\n    }\n\n    const tilesToLoad = [];\n    const tilePosition = new THREE.Vector3();\n\n    for (let col = 0; col <= panorama.cols; col++) {\n      for (let row = 0; row <= panorama.rows; row++) {\n        // TODO prefilter with less complex math if possible\n        const tileTexturePosition = { x: col * this.prop.colSize, y: row * this.prop.rowSize };\n        this.psv.dataHelper.sphericalCoordsToVector3(this.psv.dataHelper.textureCoordsToSphericalCoords(tileTexturePosition), tilePosition);\n\n        if (tilePosition.dot(this.psv.prop.direction) > 0) {\n          const tileViewerPosition = this.psv.dataHelper.vector3ToViewerCoords(tilePosition);\n\n          if (tileViewerPosition.x >= 0\n            && tileViewerPosition.x <= viewerSize.width\n            && tileViewerPosition.y >= 0\n            && tileViewerPosition.y <= viewerSize.height) {\n            const angle = tilePosition.angleTo(this.psv.prop.direction);\n\n            this.__getAdjacentTiles(col, row)\n              .forEach((tile) => {\n                const existingTile = tilesToLoad.find(c => c.row === tile.row && c.col === tile.col);\n                if (existingTile) {\n                  existingTile.angle = Math.min(existingTile.angle, angle);\n                }\n                else {\n                  tilesToLoad.push({ ...tile, angle });\n                }\n              });\n          }\n        }\n      }\n    }\n\n    this.__loadTiles(tilesToLoad);\n  }\n\n  /**\n   * @summary Get the 4 adjacent tiles\n   * @private\n   */\n  __getAdjacentTiles(col, row) {\n    const panorama = this.psv.config.panorama;\n\n    return [\n      { col: col - 1, row: row - 1 },\n      { col: col, row: row - 1 },\n      { col: col, row: row }, // eslint-disable-line object-shorthand\n      { col: col - 1, row: row },\n    ]\n      .map((tile) => {\n        // examples are for cols=16 and rows=8\n        if (tile.row < 0) {\n          // wrap on top\n          tile.row = -tile.row - 1; // -1 => 0, -2 => 1\n          tile.col += panorama.cols / 2; // change hemisphere\n        }\n        else if (tile.row >= panorama.rows) {\n          // wrap on bottom\n          tile.row = (panorama.rows - 1) - (tile.row - panorama.rows); // 8 => 7, 9 => 6\n          tile.col += panorama.cols / 2; // change hemisphere\n        }\n        if (tile.col < 0) {\n          // wrap on left\n          tile.col += panorama.cols; // -1 => 15, -2 => 14\n        }\n        else if (tile.col >= panorama.cols) {\n          // wrap on right\n          tile.col -= panorama.cols; // 16 => 0, 17 => 1\n        }\n\n        return tile;\n      });\n  }\n\n  /**\n   * @summary Loads tiles and change existing tiles priority\n   * @param {PSV.adapters.EquirectangularTilesAdapter.Tile[]} tiles\n   * @private\n   */\n  __loadTiles(tiles) {\n    this.queue.setAllPriorities(0);\n\n    tiles.forEach((tile) => {\n      const id = tileId(tile);\n      const priority = Math.PI / 2 - tile.angle;\n\n      if (this.prop.tiles[id]) {\n        this.queue.setPriority(id, priority);\n      }\n      else {\n        this.prop.tiles[id] = true;\n        this.queue.enqueue(new Task(id, priority, task => this.__loadTile(tile, task)));\n      }\n    });\n\n    this.queue.start();\n  }\n\n  /**\n   * @summary Loads and draw a tile\n   * @param {PSV.adapters.EquirectangularTilesAdapter.Tile} tile\n   * @param {PSV.adapters.EquirectangularTilesAdapter.Task} task\n   * @return {Promise}\n   * @private\n   */\n  __loadTile(tile, task) {\n    const panorama = this.psv.config.panorama;\n    const url = panorama.tileUrl(tile.col, tile.row);\n\n    if (this.psv.config.requestHeaders && typeof this.psv.config.requestHeaders === 'function') {\n      this.loader.setRequestHeader(this.psv.config.requestHeaders(url));\n    }\n\n    return new Promise((resolve, reject) => {\n      this.loader.load(url, resolve, undefined, reject);\n    })\n      .then((image) => {\n        if (!task.isCancelled()) {\n          const material = new THREE.MeshBasicMaterial({\n            side: THREE.BackSide,\n            map : utils.createTexture(image),\n          });\n          this.__swapMaterial(tile.col, tile.row, material);\n          this.psv.needsUpdate();\n        }\n      })\n      .catch(() => {\n        if (!task.isCancelled() && this.config.showErrorTile) {\n          const material = this.__getErrorMaterial();\n          this.__swapMaterial(tile.col, tile.row, material);\n          this.psv.needsUpdate();\n        }\n      });\n  }\n\n  /**\n   * @summary Applies a new texture to the faces\n   * @param {int} col\n   * @param {int} row\n   * @param {external:THREE.MeshBasicMaterial} material\n   * @private\n   */\n  __swapMaterial(col, row, material) {\n    const uvs = this.prop.geom.getAttribute('uv');\n\n    for (let c = 0; c < this.prop.facesByCol; c++) {\n      for (let r = 0; r < this.prop.facesByRow; r++) {\n        // position of the face (two triangles of the same square)\n        const faceCol = col * this.prop.facesByCol + c;\n        const faceRow = row * this.prop.facesByRow + r;\n        const isFirstRow = faceRow === 0;\n        const isLastRow = faceRow === SPHERE_SEGMENTS / 2 - 1;\n\n        // first vertex for this face (3 or 6 vertices in total)\n        let firstVertex;\n        if (isFirstRow) {\n          firstVertex = faceCol * 3;\n        }\n        else if (isLastRow) {\n          firstVertex = NB_VERTICES - SPHERE_SEGMENTS * 3 + faceCol * 3;\n        }\n        else {\n          firstVertex = 3 * (SPHERE_SEGMENTS + (faceRow - 1) * SPHERE_SEGMENTS * 2 + faceCol * 2);\n        }\n\n        // swap material\n        const matIndex = this.prop.geom.groups.find(g => g.start === firstVertex).materialIndex;\n        this.materials[matIndex] = material;\n\n        // define new uvs\n        const top = 1 - r / this.prop.facesByRow;\n        const bottom = 1 - (r + 1) / this.prop.facesByRow;\n        const left = c / this.prop.facesByCol;\n        const right = (c + 1) / this.prop.facesByCol;\n\n        if (isFirstRow) {\n          uvs.setXY(firstVertex, (left + right) / 2, top);\n          uvs.setXY(firstVertex + 1, left, bottom);\n          uvs.setXY(firstVertex + 2, right, bottom);\n        }\n        else if (isLastRow) {\n          uvs.setXY(firstVertex, right, top);\n          uvs.setXY(firstVertex + 1, left, top);\n          uvs.setXY(firstVertex + 2, (left + right) / 2, bottom);\n        }\n        else {\n          uvs.setXY(firstVertex, right, top);\n          uvs.setXY(firstVertex + 1, left, top);\n          uvs.setXY(firstVertex + 2, right, bottom);\n          uvs.setXY(firstVertex + 3, left, top);\n          uvs.setXY(firstVertex + 4, left, bottom);\n          uvs.setXY(firstVertex + 5, right, bottom);\n        }\n      }\n    }\n\n    uvs.needsUpdate = true;\n  }\n\n  /**\n   * @summary Generates an material for errored tiles\n   * @return {external:THREE.MeshBasicMaterial}\n   * @private\n   */\n  __getErrorMaterial() {\n    if (!this.prop.errorMaterial) {\n      const canvas = document.createElement('canvas');\n      canvas.width = this.prop.colSize;\n      canvas.height = this.prop.rowSize;\n\n      const ctx = canvas.getContext('2d');\n\n      ctx.fillStyle = '#333';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.font = `${canvas.width / 5}px serif`;\n      ctx.fillStyle = '#a22';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText('⚠', canvas.width / 2, canvas.height / 2);\n\n      const texture = new THREE.CanvasTexture(canvas);\n      this.prop.errorMaterial = new THREE.MeshBasicMaterial({\n        side: THREE.BackSide,\n        map : texture,\n      });\n    }\n\n    return this.prop.errorMaterial;\n  }\n\n  /**\n   * @summary Create the texture for the base image\n   * @param {HTMLImageElement} img\n   * @return {external:THREE.Texture}\n   * @private\n   */\n  __createBaseTexture(img) {\n    if (img.width !== img.height * 2) {\n      utils.logWarn('Invalid base image, the width should be twice the height');\n    }\n\n    if (this.config.baseBlur || img.width > SYSTEM.maxTextureWidth) {\n      const ratio = Math.min(1, SYSTEM.getMaxCanvasWidth() / img.width);\n\n      const buffer = document.createElement('canvas');\n      buffer.width = img.width * ratio;\n      buffer.height = buffer.width / 2;\n\n      const ctx = buffer.getContext('2d');\n      if (this.config.baseBlur) {\n        ctx.filter = 'blur(1px)';\n      }\n      ctx.drawImage(img, 0, 0, buffer.width, buffer.height);\n\n      return utils.createTexture(buffer);\n    }\n\n    return utils.createTexture(img);\n  }\n\n}\n\n/* eslint-disable */\n\n/**\n * UNUSED : Returns the apparent size of a segment on the screen\n * @private\n */\n// function getSegmentSize() {\n//   const p1 = this.psv.prop.direction.clone();\n//   const p2 = this.psv.prop.direction.clone();\n//\n//   const angle = Math.PI * 2 / SPHERE_SEGMENTS / 2;\n//   const dst = Math.atan(angle) * CONSTANTS.SPHERE_RADIUS;\n//   const horizontalAxis = new THREE.Vector3(0, 1, 0).cross(this.psv.prop.direction).normalize();\n//\n//   p1.add(horizontalAxis.clone().multiplyScalar(dst));\n//   p2.add(horizontalAxis.clone().multiplyScalar(-dst));\n//\n//   const p1a = this.psv.dataHelper.vector3ToViewerCoords(p1);\n//   const p2a = this.psv.dataHelper.vector3ToViewerCoords(p2);\n//\n//   const segmentSize = p2a.x - p1a.x;\n// }\n"],"names":["Task","id","priority","fn","status","STATUS","PENDING","start","RUNNING","then","DONE","ERROR","cancel","CANCELLED","isCancelled","Queue","concurency","runningTasks","tasks","enqueue","task","clear","Object","values","forEach","setPriority","taskId","setAllPriorities","keys","length","nextTask","filter","sort","a","b","pop","SPHERE_SEGMENTS","NB_VERTICES","NB_GROUPS","QUEUE_CONCURENCY","tileId","tile","col","row","powerOfTwo","x","Math","log","EquirectangularTilesAdapter","psv","options","config","showErrorTile","baseBlur","materials","queue","prop","colSize","rowSize","facesByCol","facesByRow","tiles","geom","originalUvs","errorMaterial","loader","THREE","ImageLoader","withCredentials","setWithCredentials","requestHeaders","setRequestHeader","on","CONSTANTS","EVENTS","POSITION_UPDATED","ZOOM_UPDATED","destroy","off","__cleanup","map","dispose","handleEvent","e","type","__refresh","mat","loadTexture","panorama","width","cols","rows","tileUrl","Promise","reject","PSVError","height","setAttribute","clone","panoData","fullWidth","fullHeight","croppedWidth","croppedHeight","croppedX","croppedY","baseUrl","textureLoader","loadImage","p","setProgress","img","texture","__createBaseTexture","resolve","createMesh","scale","geometry","SphereGeometry","SPHERE_RADIUS","PI","toNonIndexed","i","k","addGroup","getAttribute","mesh","Mesh","set","setTexture","textureData","material","MeshBasicMaterial","side","BackSide","push","setTimeout","viewerSize","size","tilesToLoad","tilePosition","Vector3","tileTexturePosition","y","dataHelper","sphericalCoordsToVector3","textureCoordsToSphericalCoords","dot","direction","tileViewerPosition","vector3ToViewerCoords","angle","angleTo","__getAdjacentTiles","existingTile","find","c","min","__loadTiles","__loadTile","url","load","undefined","image","utils","createTexture","__swapMaterial","needsUpdate","catch","__getErrorMaterial","uvs","r","faceCol","faceRow","isFirstRow","isLastRow","firstVertex","matIndex","groups","g","materialIndex","top","bottom","left","right","setXY","canvas","document","createElement","ctx","getContext","fillStyle","fillRect","font","textAlign","textBaseline","fillText","CanvasTexture","logWarn","SYSTEM","maxTextureWidth","ratio","getMaxCanvasWidth","buffer","drawImage","AbstractAdapter","supportsTransition"],"mappings":"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"}