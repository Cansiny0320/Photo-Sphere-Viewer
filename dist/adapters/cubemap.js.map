{"version":3,"file":"cubemap.js","sources":["../../src/adapters/cubemap/index.js"],"sourcesContent":["import * as THREE from 'three';\nimport { AbstractAdapter, CONSTANTS, PSVError, SYSTEM, utils } from '../..';\n\n\n/**\n * @typedef {Object} PSV.adapters.CubemapAdapter.Cubemap\n * @summary Object defining a cubemap\n * @property {string} left\n * @property {string} front\n * @property {string} right\n * @property {string} back\n * @property {string} top\n * @property {string} bottom\n */\n\n\nconst CUBE_VERTICES = 8;\nconst CUBE_MAP = [0, 2, 4, 5, 3, 1];\nconst CUBE_HASHMAP = ['left', 'right', 'top', 'bottom', 'back', 'front'];\n\n\n/**\n * @summary Adapter for cubemaps\n * @memberof PSV.adapters\n */\nexport class CubemapAdapter extends AbstractAdapter {\n\n  static id = 'cubemap';\n  static supportsTransition = true;\n\n  /**\n   * @override\n   * @param {string[] | PSV.adapters.CubemapAdapter.Cubemap} panorama\n   * @returns {Promise.<PSV.TextureData>}\n   */\n  loadTexture(panorama) {\n    const cleanPanorama = [];\n\n    if (Array.isArray(panorama)) {\n      if (panorama.length !== 6) {\n        return Promise.reject(new PSVError('Must provide exactly 6 image paths when using cubemap.'));\n      }\n\n      // reorder images\n      for (let i = 0; i < 6; i++) {\n        cleanPanorama[i] = panorama[CUBE_MAP[i]];\n      }\n    }\n    else if (typeof panorama === 'object') {\n      if (!CUBE_HASHMAP.every(side => !!panorama[side])) {\n        return Promise.reject(new PSVError('Must provide exactly left, front, right, back, top, bottom when using cubemap.'));\n      }\n\n      // transform into array\n      CUBE_HASHMAP.forEach((side, i) => {\n        cleanPanorama[i] = panorama[side];\n      });\n    }\n    else {\n      return Promise.reject(new PSVError('Invalid cubemap panorama, are you using the right adapter?'));\n    }\n\n    if (this.psv.config.fisheye) {\n      utils.logWarn('fisheye effect with cubemap texture can generate distorsion');\n    }\n\n    const promises = [];\n    const progress = [0, 0, 0, 0, 0, 0];\n\n    for (let i = 0; i < 6; i++) {\n      promises.push(\n        this.psv.textureLoader.loadImage(cleanPanorama[i], (p) => {\n          progress[i] = p;\n          this.psv.loader.setProgress(utils.sum(progress) / 6);\n        })\n          .then(img => this.__createCubemapTexture(img))\n      );\n    }\n\n    return Promise.all(promises)\n      .then(texture => ({ panorama, texture }));\n  }\n\n  /**\n   * @summary Creates the final texture from image\n   * @param {HTMLImageElement} img\n   * @returns {external:THREE.Texture}\n   * @private\n   */\n  __createCubemapTexture(img) {\n    let finalImage;\n\n    // resize image\n    if (img.width > SYSTEM.maxTextureWidth) {\n      const buffer = document.createElement('canvas');\n      const ratio = SYSTEM.getMaxCanvasWidth() / img.width;\n\n      buffer.width = img.width * ratio;\n      buffer.height = img.height * ratio;\n\n      const ctx = buffer.getContext('2d');\n      ctx.drawImage(img, 0, 0, buffer.width, buffer.height);\n\n      finalImage = buffer;\n    }\n    else {\n      finalImage = img;\n    }\n\n    return utils.createTexture(finalImage);\n  }\n\n  /**\n   * @override\n   */\n  createMesh(scale = 1) {\n    const cubeSize = CONSTANTS.SPHERE_RADIUS * 2 * scale;\n    const geometry = new THREE.BoxGeometry(cubeSize, cubeSize, cubeSize, CUBE_VERTICES, CUBE_VERTICES, CUBE_VERTICES);\n\n    const materials = [];\n    for (let i = 0; i < 6; i++) {\n      materials.push(new THREE.MeshBasicMaterial({\n        side: THREE.BackSide,\n      }));\n    }\n\n    const mesh = new THREE.Mesh(geometry, materials);\n    mesh.scale.set(1, 1, -1);\n\n    return mesh;\n  }\n\n  /**\n   * @override\n   */\n  setTexture(mesh, textureData) {\n    const { texture } = textureData;\n\n    for (let i = 0; i < 6; i++) {\n      if (mesh.material[i].map) {\n        mesh.material[i].map.dispose();\n      }\n\n      mesh.material[i].map = texture[i];\n    }\n  }\n\n  /**\n   * @override\n   */\n  setTextureOpacity(mesh, opacity) {\n    for (let i = 0; i < 6; i++) {\n      mesh.material[i].opacity = opacity;\n      mesh.material[i].transparent = opacity < 1;\n    }\n  }\n\n}\n"],"names":["CUBE_VERTICES","CUBE_MAP","CUBE_HASHMAP","CubemapAdapter","loadTexture","panorama","cleanPanorama","Array","isArray","length","Promise","reject","PSVError","i","every","side","forEach","psv","config","fisheye","utils","logWarn","promises","progress","push","textureLoader","loadImage","p","loader","setProgress","sum","then","img","__createCubemapTexture","all","texture","finalImage","width","SYSTEM","maxTextureWidth","buffer","document","createElement","ratio","getMaxCanvasWidth","height","ctx","getContext","drawImage","createTexture","createMesh","scale","cubeSize","CONSTANTS","SPHERE_RADIUS","geometry","THREE","BoxGeometry","materials","MeshBasicMaterial","BackSide","mesh","Mesh","set","setTexture","textureData","material","map","dispose","setTextureOpacity","opacity","transparent","AbstractAdapter","id","supportsTransition"],"mappings":"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"}